[case test_argument_missing_from_resolver_throws]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(String))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo) -> Optional[str]:
        return 'hi'

[out]
main:8: error: Parameter "new_arg" of type Union[builtins.str, None] is missing, but required in resolver definition
Found 1 error in 1 file (checked 1 source file)


[case test_missing_field_throws]
from typing import Optional
from graphene import ObjectType, Argument, ResolveInfo, String

class TestQuery(ObjectType):
    @staticmethod
    def resolve_field(_: None, __: ResolveInfo) -> Optional[str]:
        return 'hi'

[out]
main:6: error: No field with name "field" defined
Found 1 error in 1 file (checked 1 source file)


[case test_type_mismatch_throws]
from typing import Optional
from graphene import ObjectType, Argument, ResolveInfo, String, Field

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(String))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[int]) -> Optional[str]:
        return 'hi'

[out]
main:8: error: Parameter "new_arg" has type Union[builtins.int, None], expected type Union[builtins.str, None]
Found 1 error in 1 file (checked 1 source file)


[case test_optional_annotation_on_nonnull_variable_throws]
from typing import Optional
from graphene import ObjectType, Argument, ResolveInfo, String, Field, NonNull

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(NonNull(String)))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[str]) -> Optional[str]:
        return 'hi'

[out]
main:8: error: Parameter "new_arg" has type Union[builtins.str, None], expected type builtins.str
Found 1 error in 1 file (checked 1 source file)


[case test_optional_annotation_on_required_variable_throws]
from typing import Optional
from graphene import ObjectType, Argument, ResolveInfo, String, Field

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(String, required=True))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[str]) -> Optional[str]:
        return 'hi'

[out]
main:8: error: Parameter "new_arg" has type Union[builtins.str, None], expected type builtins.str
Found 1 error in 1 file (checked 1 source file)


[case test_non_optional_annotation_on_variable_with_required_set_to_false_throws]
from typing import Optional
from graphene import ObjectType, Argument, ResolveInfo, String, Field

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(String, required=False))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: str) -> Optional[str]:
        return 'hi'

[out]
main:8: error: Parameter "new_arg" has type builtins.str, expected type Union[builtins.str, None]
Found 1 error in 1 file (checked 1 source file)


[case test_optional_annotation_on_variable_with_non_none_default_value_throws]
from typing import Optional
from graphene import ObjectType, Argument, ResolveInfo, String, Field

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(String, default_value='hi'))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[str]) -> Optional[str]:
        return 'hi'

[out]
main:8: error: Parameter "new_arg" has type Union[builtins.str, None], expected type builtins.str
Found 1 error in 1 file (checked 1 source file)


[case test_non_optional_annotation_on_variable_with_none_default_value_throws]
from typing import Optional
from graphene import ObjectType, Argument, ResolveInfo, String, Field

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(String, default_value=None))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: str) -> Optional[str]:
        return 'hi'

[out]
main:8: error: Parameter "new_arg" has type builtins.str, expected type Union[builtins.str, None]
Found 1 error in 1 file (checked 1 source file)


[case test_non_field_argument_attributes_are_ignored]
from typing import Optional
from graphene import ObjectType, Argument, ResolveInfo, String, Field

class TestQuery(ObjectType):
    # Test to make sure name, description, required, and default_value arguments aren't
    # checked for on the resolver.
    field = Field(
        String,
        new_arg=Argument(String, name='field_name', required=True, default_value='hi'),
        deprecation_reason='who knows',
        description='a field',
        required=True,
    )

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: str) -> str:
        return 'hi'

[out]
Success: no issues found in 1 source file


[case test_enum_with_inaccurate_annotation_throws]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String, Enum

class MyEnum(Enum):
    one = 'ONE'

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(MyEnum))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[MyEnum]) -> Optional[str]:
        return 'hi'

[out]
main:11: error: Parameter "new_arg" has type Union[main.MyEnum, None], expected type Union[builtins.str, None]
Found 1 error in 1 file (checked 1 source file)


[case test_unsupported_type_with_any_annotation_passes]
from typing import Optional
from enum import Enum as PyEnum
from graphene import ObjectType, Field, Argument, ResolveInfo, String, Enum

class MyEnum(PyEnum):
    one = 'ONE'

# It's not clear how to support this type, so just count it as `Any` for now.
MyDynamicEnum = Enum.from_enum(MyEnum)

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(MyDynamicEnum))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[str]) -> Optional[str]:
        return 'hi'

[out]
Success: no issues found in 1 source file


[case test_enum_with_accurate_annotation_passes]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String, Enum

class MyEnum(Enum):
    one = 'ONE'

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(MyEnum))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[str]) -> Optional[str]:
        return 'hi'

[out]
Success: no issues found in 1 source file


[case test_list_type_with_inaccurate_annotation_throws]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String, List

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(List(String)))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[str]) -> Optional[str]:
        return 'hi'

[out]
main:8: error: Parameter "new_arg" has type Union[builtins.str, None], expected type Union[builtins.list[Union[builtins.str, None]], None]
Found 1 error in 1 file (checked 1 source file)


[case test_list_type_with_accurate_annotation_passes]
from typing import Optional, List as ListType
from graphene import ObjectType, Field, Argument, ResolveInfo, String, List

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(List(String)))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[ListType[Optional[str]]]) -> Optional[str]:
        return 'hi'

[out]
Success: no issues found in 1 source file


[case test_json_type_with_inaccurate_annotation_throws]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String, JSONString

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(JSONString))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[str]) -> Optional[str]:
        return 'hi'
[out]
main:8: error: Parameter "new_arg" has type Union[builtins.str, None], expected type Union[builtins.dict[Any, Any], None]
Found 1 error in 1 file (checked 1 source file)


[case test_json_type_with_accurate_annotation_passes]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String, JSONString

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(JSONString))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[dict]) -> Optional[str]:
        return 'hi'
[out]
Success: no issues found in 1 source file


[case test_interface_attribute_with_accurate_annotation_passes]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String, Interface

class SimpleInterface(Interface):
    field = Field(String, new_arg=Argument(String))


class TestQuery(ObjectType):
    class Meta:
        interfaces = (SimpleInterface,)
    
    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[str]) -> Optional[str]:
        return 'hi'
[out]
Success: no issues found in 1 source file

[case test_interface_attribute_forward_reference_passes]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String, Interface

class TestQuery(ObjectType):
    class Meta:
        interfaces = (SimpleInterfaceAfter,)
    
    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[str]) -> Optional[str]:
        return 'hi'

class SimpleInterfaceAfter(Interface):
    field = Field(String, new_arg=Argument(String))
[out]
Success: no issues found in 1 source file


[case test_interface_attribute_with_inaccurate_annotation_throws]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String, Interface

class SimpleInterface(Interface):
    field = Field(String, new_arg=Argument(String))


class TestQuery(ObjectType):
    class Meta:
        interfaces = (SimpleInterface,)
    
    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[int]) -> Optional[str]:
        return 'hi'
[out]
main:13: error: Parameter "new_arg" has type Union[builtins.int, None], expected type Union[builtins.str, None]
Found 1 error in 1 file (checked 1 source file)


[case test_non_tuple_interface_attribute_on_meta_class_throws]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String, Interface

class SimpleInterface(Interface):
    field = Field(String, new_arg=Argument(String))


class TestQuery(ObjectType):
    class Meta:
        interfaces = 'hi'
[out]
main:10: error: "interfaces" attribute in Meta class must be a tuple type
Found 1 error in 1 file (checked 1 source file)


[case test_custom_graphene_scalar_with_accurate_resolver_annotation_passes]
from typing import Optional, Any
from graphene import ObjectType, Field, Scalar, ResolveInfo, Argument


class JSONString(Scalar):
    serialize = str
    parse = str

    @staticmethod
    def parse_literal(node: Any) -> Optional[Any]:
        return 'hi'

    @staticmethod
    def parse_value(value: str) -> str:
        return 'hi'

class TestQuery(ObjectType):
    field = Field(JSONString, arg=Argument(JSONString))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, arg: Optional[str]) -> Optional[str]:
        return 'hi'
[out]
Success: no issues found in 1 source file


[case test_custom_graphene_scalar_with_inaccurate_resolver_annotation_fails]
from typing import Optional, Any
from graphene import ObjectType, Field, Scalar, ResolveInfo, Argument


class JSONString(Scalar):
    serialize = str
    parse = str

    @staticmethod
    def parse_literal(node: Any) -> Optional[Any]:
        return 'hi'

    @staticmethod
    def parse_value(value: str) -> str:
        return 'hi'

class TestQuery(ObjectType):
    field = Field(JSONString, arg=Argument(JSONString))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, arg: str) -> Optional[str]:
        return 'hi'
[out]
main:21: error: Parameter "arg" has type builtins.str, expected type Union[builtins.str, None]
Found 1 error in 1 file (checked 1 source file)


[case test_custom_graphene_scalar_with_parse_value_returning_any_passes]
from typing import Optional, Any
from graphene import ObjectType, Field, Scalar


class JSONString(Scalar):
    serialize = str
    parse = str

    @staticmethod
    def parse_literal(node: Any) -> Optional[Any]:
        return 'hi'

    @staticmethod
    def parse_value(value: str) -> Any:
        return 'hi'

class TestQuery(ObjectType):
    field = Field(JSONString)
[out]
Success: no issues found in 1 source file


[case test_custom_graphene_scalar_with_parse_value_without_return_type_annotation_passes]
from typing import Optional, Any
from graphene import ObjectType, Field, Scalar


class JSONString(Scalar):
    serialize = str
    parse = str

    @staticmethod
    def parse_literal(node: Any) -> Optional[Any]:
        return 'hi'

    @staticmethod
    def parse_value(value: str):
        return 'hi'

class TestQuery(ObjectType):
    field = Field(JSONString)
[out]
Success: no issues found in 1 source file


[case test_custom_graphene_scalar_with_non_static_parse_value_passes]
from typing import Optional, Any
from graphene import ObjectType, Field, Scalar


class JSONString(Scalar):
    serialize = str
    parse = str

    @staticmethod
    def parse_literal(node: Any) -> Optional[Any]:
        return 'hi'

    def parse_value(self, value: str) -> str:
        return 'hi'

class TestQuery(ObjectType):
    field = Field(JSONString)
[out]
Success: no issues found in 1 source file

[case test_custom_graphene_scalar_with_non_function_parse_value_passes]
from typing import Optional, Any
from graphene import ObjectType, Field, Scalar


class JSONString(Scalar):
    serialize = str
    parse = str

    @staticmethod
    def parse_literal(node: Any) -> Optional[Any]:
        return 'hi'

    parse_value = str

class TestQuery(ObjectType):
    field = Field(JSONString)
[out]
Success: no issues found in 1 source file


[case test_non_static_resolver_with_accurate_annotation_passes]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(String))

    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[str]) -> Optional[str]:
        return 'hi'

[out]
main:7: error: Self argument missing for a non-static method (or an invalid type for self)
Found 1 error in 1 file (checked 1 source file)


[case test_non_static_resolver_with_inaccurate_annotation_throws]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(String))

    def resolve_field(_: None, __: ResolveInfo, new_arg: str) -> Optional[str]:
        return 'hi'

[out]
main:7: error: Parameter "new_arg" has type builtins.str, expected type Union[builtins.str, None]
main:7: error: Self argument missing for a non-static method (or an invalid type for self)
Found 2 errors in 1 file (checked 1 source file)


[case test_resolver_with_inaccurate_previous_argument_passes]
from graphene import ObjectType, Field, ResolveInfo, String


class RuntimePerson:
    name: str


class Person(ObjectType[RuntimePerson]):
    name = Field(String, required=True)

    @staticmethod
    def resolve_name(person: RuntimePerson, _: ResolveInfo) -> str:
        return ''

[out]
Success: no issues found in 1 source file


[case test_resolver_with_inaccurate_previous_argument_throws]
from graphene import ObjectType, Field, ResolveInfo, String


class RuntimePerson:
    name: str


class NotAPerson:
    num_of_tails: int


class Person(ObjectType[RuntimePerson]):
    name = Field(String, required=True)

    @staticmethod
    def resolve_name(person: NotAPerson, _: ResolveInfo) -> str:
        return ''

[out]
main:16: error: Parameter "person" has type main.NotAPerson, expected type main.RuntimePerson
Found 1 error in 1 file (checked 1 source file)


[case test_resolver_with_inaccurate_union_previous_argument_throws]
from typing import Union

from graphene import ObjectType, Field, ResolveInfo, String


class A:
    name: str

class B:
    name: str

class C:
    name: str


RT = Union[A, C]


class Person(ObjectType[RT]):
    name = Field(String, required=True)

    @staticmethod
    def resolve_name(person: Union[A, B], _: ResolveInfo) -> str:
        return ''

[out]
main:23: error: Parameter "person" has type Union[main.A, main.B], expected type Union[main.A, main.C]
Found 1 error in 1 file (checked 1 source file)


[case test_resolver_with_same_union_previous_argument_passes]
from typing import Union

from graphene import ObjectType, Field, ResolveInfo, String


class A:
    name: str

class B:
    name: str

class C:
    name: str


RT = Union[A, C]


class Person(ObjectType[RT]):
    name = Field(String, required=True)

    @staticmethod
    def resolve_name(person: RT, _: ResolveInfo) -> str:
        return ''

[out]
Success: no issues found in 1 source file


[case test_resolver_with_wrong_return_type_fails]
from graphene import ObjectType, Field, ResolveInfo, String

class Person(ObjectType):
    name = Field(String, required=True)

    @staticmethod
    def resolve_name(_: None, __: ResolveInfo) -> int:
        return 0

[out]
main:7: error: Resolver returns type builtins.int, expected type builtins.str
Found 1 error in 1 file (checked 1 source file)


[case test_resolver_with_wrong_object_return_type_fails]
from typing import List as ListType

from graphene import ObjectType, Field, ResolveInfo, String, List, NonNull


class AnimalModel:
    species: str


class PersonModel:
    pets: ListType[AnimalModel]


class EnemyModel:
    how_they_have_wronged_me: str


class Animal(ObjectType[AnimalModel]):
    species = Field(String, required=True)


class Person(ObjectType[PersonModel]):
    pets = Field(List(NonNull(Animal)), required=True)

    @staticmethod
    def resolve_pets(person: PersonModel, _: ResolveInfo) -> ListType[EnemyModel]:
        return []

[out]
main:26: error: Resolver returns type builtins.list[main.EnemyModel], expected type typing.Sequence[main.AnimalModel]
Found 1 error in 1 file (checked 1 source file)


[case test_resolver_with_correct_object_return_type_passes]
from typing import List as ListType

from graphene import ObjectType, Field, ResolveInfo, String, List, NonNull


class AnimalModel:
    species: str


class PersonModel:
    pets: ListType[AnimalModel]


class Animal(ObjectType[AnimalModel]):
    species = Field(String, required=True)


class Person(ObjectType[PersonModel]):
    pets = Field(List(NonNull(Animal)), required=True)

    @staticmethod
    def resolve_pets(person: PersonModel, _: ResolveInfo) -> ListType[AnimalModel]:
        return []

[out]
Success: no issues found in 1 source file


[case test_resolver_with_correct_object_union_return_type_passes]
from typing import List as ListType, Union

from graphene import ObjectType, Field, ResolveInfo, String, List, NonNull


class AnimalModel:
    species: str


class ForeignAnimalModel:
    species: str


class PersonModel:
    pets: ListType[AnimalModel]


RuntimeAnimal = Union[AnimalModel, ForeignAnimalModel]


class Animal(ObjectType[RuntimeAnimal]):
    species = Field(String, required=True)


class Person(ObjectType[PersonModel]):
    pets = Field(List(NonNull(Animal)), required=True)

    @staticmethod
    def resolve_pets(person: PersonModel, _: ResolveInfo) -> ListType[AnimalModel]:
        return []

[out]
Success: no issues found in 1 source file


[case test_resolver_with_mismatched_return_nullability_fails]
from typing import List as ListType, Optional

from graphene import ObjectType, Field, ResolveInfo, String


class PersonModel:
    name: Optional[str]


class Person(ObjectType[PersonModel]):
    name = Field(String, required=True)

    @staticmethod
    def resolve_name(person: PersonModel, _: ResolveInfo) -> Optional[str]:
        return ''

[out]
main:14: error: Resolver returns type Union[builtins.str, None], expected type builtins.str
Found 1 error in 1 file (checked 1 source file)


[case test_resolver_with_scalar_type_is_correct]
from graphene import ObjectType, Field, ResolveInfo, String
from graphql import ResolveInfo

class A:
    name: str

class TestQuery(ObjectType):
    name = Field(A, name=String())

    def resolve_user(self, info: ResolveInfo, name: Optional[str]) -> None:
        return None

[out]
Success: no issues found in 1 source file
