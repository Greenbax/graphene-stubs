[case test_argument_missing_from_resolver_throws]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(String))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo) -> Optional[str]:
        return 'hi'

[out]
main:8: error: Parameter "new_arg" of type Optional[str] is missing, but required in resolver definition
Found 1 error in 1 file (checked 1 source file)


[case test_missing_field_throws]
from typing import Optional
from graphene import ObjectType, Argument, ResolveInfo, String

class TestQuery(ObjectType):
    @staticmethod
    def resolve_field(_: None, __: ResolveInfo) -> Optional[str]:
        return 'hi'

[out]
main:6: error: No field with name "field" defined
Found 1 error in 1 file (checked 1 source file)


[case test_type_mismatch_throws]
from typing import Optional
from graphene import ObjectType, Argument, ResolveInfo, String, Field

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(String))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[int]) -> Optional[str]:
        return 'hi'

[out]
main:8: error: Parameter "new_arg" has type Optional[int], expected type Optional[str]
Found 1 error in 1 file (checked 1 source file)


[case test_optional_annotation_on_nonnull_variable_throws]
from typing import Optional
from graphene import ObjectType, Argument, ResolveInfo, String, Field, NonNull

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(NonNull(String)))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[str]) -> Optional[str]:
        return 'hi'

[out]
main:8: error: Parameter "new_arg" has type Optional[str], expected type str
Found 1 error in 1 file (checked 1 source file)


[case test_optional_annotation_on_required_variable_throws]
from typing import Optional
from graphene import ObjectType, Argument, ResolveInfo, String, Field

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(String, required=True))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[str]) -> Optional[str]:
        return 'hi'

[out]
main:8: error: Parameter "new_arg" has type Optional[str], expected type str
Found 1 error in 1 file (checked 1 source file)


[case test_non_optional_annotation_on_variable_with_required_set_to_false_throws]
from typing import Optional
from graphene import ObjectType, Argument, ResolveInfo, String, Field

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(String, required=False))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: str) -> Optional[str]:
        return 'hi'

[out]
main:8: error: Parameter "new_arg" has type str, expected type Optional[str]
Found 1 error in 1 file (checked 1 source file)


[case test_optional_annotation_on_variable_with_non_none_default_value_throws]
from typing import Optional
from graphene import ObjectType, Argument, ResolveInfo, String, Field

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(String, default_value='hi'))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[str]) -> Optional[str]:
        return 'hi'

[out]
main:8: error: Parameter "new_arg" has type Optional[str], expected type str
Found 1 error in 1 file (checked 1 source file)


[case test_non_optional_annotation_on_variable_with_none_default_value_throws]
from typing import Optional
from graphene import ObjectType, Argument, ResolveInfo, String, Field

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(String, default_value=None))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: str) -> Optional[str]:
        return 'hi'

[out]
main:8: error: Parameter "new_arg" has type str, expected type Optional[str]
Found 1 error in 1 file (checked 1 source file)


[case test_non_field_argument_attributes_are_ignored]
from typing import Optional
from graphene import ObjectType, Argument, ResolveInfo, String, Field

class TestQuery(ObjectType):
    # Test to make sure name, description, required, and default_value arguments aren't
    # checked for on the resolver.
    field = Field(
        String,
        new_arg=Argument(String, name='field_name', required=True, default_value='hi'),
        deprecation_reason='who knows',
        description='a field',
        required=True,
    )

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: str) -> Optional[str]:
        return 'hi'

[out]
Success: no issues found in 1 source file


[case test_enum_with_inaccurate_annotation_throws]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String, Enum

class MyEnum(Enum):
    one = 'ONE'

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(MyEnum))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[MyEnum]) -> Optional[str]:
        return 'hi'

[out]
main:11: error: Parameter "new_arg" has type Optional[MyEnum], expected type Optional[str]
Found 1 error in 1 file (checked 1 source file)


[case test_unsupported_type_with_any_annotation_passes]
from typing import Optional
from enum import Enum as PyEnum
from graphene import ObjectType, Field, Argument, ResolveInfo, String, Enum

class MyEnum(PyEnum):
    one = 'ONE'

# It's not clear how to support this type, so just count it as `Any` for now.
MyDynamicEnum = Enum.from_enum(MyEnum)

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(MyDynamicEnum))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[str]) -> Optional[str]:
        return 'hi'

[out]
Success: no issues found in 1 source file


[case test_enum_with_accurate_annotation_passes]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String, Enum

class MyEnum(Enum):
    one = 'ONE'

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(MyEnum))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[str]) -> Optional[str]:
        return 'hi'

[out]
Success: no issues found in 1 source file


[case test_list_type_with_inaccurate_annotation_throws]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String, List

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(List(String)))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[str]) -> Optional[str]:
        return 'hi'

[out]
main:8: error: Parameter "new_arg" has type Optional[str], expected type Optional[List[Optional[str]]]
Found 1 error in 1 file (checked 1 source file)


[case test_list_type_with_accurate_annotation_passes]
from typing import Optional, List as ListType
from graphene import ObjectType, Field, Argument, ResolveInfo, String, List

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(List(String)))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[ListType[Optional[str]]]) -> Optional[str]:
        return 'hi'

[out]
Success: no issues found in 1 source file


[case test_json_type_with_inaccurate_annotation_throws]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String, JSONString

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(JSONString))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[str]) -> Optional[str]:
        return 'hi'
[out]
main:8: error: Parameter "new_arg" has type Optional[str], expected type Optional[dict]
Found 1 error in 1 file (checked 1 source file)


[case test_json_type_with_accurate_annotation_passes]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String, JSONString

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(JSONString))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[dict]) -> Optional[str]:
        return 'hi'
[out]
Success: no issues found in 1 source file


[case test_interface_attribute_with_accurate_annotation_passes]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String, Interface

class SimpleInterface(Interface):
    field = Field(String, new_arg=Argument(String))


class TestQuery(ObjectType):
    class Meta:
        interfaces = (SimpleInterface,)
    
    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[str]) -> Optional[str]:
        return 'hi'
[out]
Success: no issues found in 1 source file


[case test_interface_attribute_with_inaccurate_annotation_throws]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String, Interface

class SimpleInterface(Interface):
    field = Field(String, new_arg=Argument(String))


class TestQuery(ObjectType):
    class Meta:
        interfaces = (SimpleInterface,)
    
    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[int]) -> Optional[str]:
        return 'hi'
[out]
main:13: error: Parameter "new_arg" has type Optional[int], expected type Optional[str]
Found 1 error in 1 file (checked 1 source file)


[case test_non_tuple_interface_attribute_on_meta_class_throws]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String, Interface

class SimpleInterface(Interface):
    field = Field(String, new_arg=Argument(String))


class TestQuery(ObjectType):
    class Meta:
        interfaces = 'hi'
[out]
main:10: error: "interfaces" attribute in Meta class must be a tuple type
Found 1 error in 1 file (checked 1 source file)


[case test_custom_graphene_scalar_with_accurate_resolver_annotation_passes]
from typing import Optional, Any
from graphene import ObjectType, Field, Scalar, ResolveInfo, Argument


class JSONString(Scalar):
    serialize = str
    parse = str

    @staticmethod
    def parse_literal(node: Any) -> Optional[Any]:
        return 'hi'

    @staticmethod
    def parse_value(value: str) -> str:
        return 'hi'

class TestQuery(ObjectType):
    field = Field(JSONString, arg=Argument(JSONString))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, arg: Optional[str]) -> Optional[str]:
        return 'hi'
[out]
Success: no issues found in 1 source file


[case test_custom_graphene_scalar_with_inaccurate_resolver_annotation_fails]
from typing import Optional, Any
from graphene import ObjectType, Field, Scalar, ResolveInfo, Argument


class JSONString(Scalar):
    serialize = str
    parse = str

    @staticmethod
    def parse_literal(node: Any) -> Optional[Any]:
        return 'hi'

    @staticmethod
    def parse_value(value: str) -> str:
        return 'hi'

class TestQuery(ObjectType):
    field = Field(JSONString, arg=Argument(JSONString))

    @staticmethod
    def resolve_field(_: None, __: ResolveInfo, arg: str) -> Optional[str]:
        return 'hi'
[out]
main:21: error: Parameter "arg" has type str, expected type Optional[str]
Found 1 error in 1 file (checked 1 source file)


[case test_custom_graphene_scalar_with_parse_value_returning_any_passes]
from typing import Optional, Any
from graphene import ObjectType, Field, Scalar


class JSONString(Scalar):
    serialize = str
    parse = str

    @staticmethod
    def parse_literal(node: Any) -> Optional[Any]:
        return 'hi'

    @staticmethod
    def parse_value(value: str) -> Any:
        return 'hi'

class TestQuery(ObjectType):
    field = Field(JSONString)
[out]
Success: no issues found in 1 source file


[case test_custom_graphene_scalar_with_parse_value_without_return_type_annotation_passes]
from typing import Optional, Any
from graphene import ObjectType, Field, Scalar


class JSONString(Scalar):
    serialize = str
    parse = str

    @staticmethod
    def parse_literal(node: Any) -> Optional[Any]:
        return 'hi'

    @staticmethod
    def parse_value(value: str):
        return 'hi'

class TestQuery(ObjectType):
    field = Field(JSONString)
[out]
Success: no issues found in 1 source file


[case test_custom_graphene_scalar_with_non_static_parse_value_passes]
from typing import Optional, Any
from graphene import ObjectType, Field, Scalar


class JSONString(Scalar):
    serialize = str
    parse = str

    @staticmethod
    def parse_literal(node: Any) -> Optional[Any]:
        return 'hi'

    def parse_value(self, value: str) -> str:
        return 'hi'

class TestQuery(ObjectType):
    field = Field(JSONString)
[out]
Success: no issues found in 1 source file

[case test_custom_graphene_scalar_with_non_function_parse_value_passes]
from typing import Optional, Any
from graphene import ObjectType, Field, Scalar


class JSONString(Scalar):
    serialize = str
    parse = str

    @staticmethod
    def parse_literal(node: Any) -> Optional[Any]:
        return 'hi'

    parse_value = str

class TestQuery(ObjectType):
    field = Field(JSONString)
[out]
Success: no issues found in 1 source file


[case test_non_static_resolver_with_accurate_annotation_passes]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(String))

    def resolve_field(_: None, __: ResolveInfo, new_arg: Optional[str]) -> Optional[str]:
        return 'hi'

[out]
main:7: error: Self argument missing for a non-static method (or an invalid type for self)
Found 1 error in 1 file (checked 1 source file)


[case test_non_static_resolver_with_inaccurate_annotation_throws]
from typing import Optional
from graphene import ObjectType, Field, Argument, ResolveInfo, String

class TestQuery(ObjectType):
    field = Field(String, new_arg=Argument(String))

    def resolve_field(_: None, __: ResolveInfo, new_arg: str) -> Optional[str]:
        return 'hi'

[out]
main:7: error: Parameter "new_arg" has type str, expected type Optional[str]
main:7: error: Self argument missing for a non-static method (or an invalid type for self)
Found 2 errors in 1 file (checked 1 source file)
